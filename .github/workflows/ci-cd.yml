name: Deploy mono-repo without OCPP LIGHTSAIL

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-deploy:
    name: Build and deploy
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      ECR_REPOSITORY: mono-repo-without-ocpp
      IMAGE_TAG: latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push Docker image
        id: build-and-push-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: mono-repo-without-ocpp
          IMAGE_TAG: latest
        run: |
          docker build -t ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} .
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

      - name: Deploy to Lightsail
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: mono-repo-without-ocpp
          IMAGE_TAG: latest
          LIGHTSAIL_INSTANCE_IP: ${{ secrets.LIGHTSAIL_INSTANCE_IP }}
          SSH_KEY: ${{ secrets.LIGHTSAIL_PRIVATE_KEY }}
          USERNAME: ubuntu
          PORT: 5050
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          CONTAINER_NAME: NON-OCPP

        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.LIGHTSAIL_INSTANCE_IP }}
          username: ${{ env.USERNAME }}
          key: ${{ env.SSH_KEY }}
          script: |
            set -e
            echo "üîπ Starting deployment..."

            # Check and install Docker if missing
            if ! command -v docker &> /dev/null; then
              echo "‚û°Ô∏è Installing Docker..."
              sudo apt-get update
              sudo apt-get install -y docker.io
            else
              echo "‚úÖ Docker is already installed"
            fi

            # Check and install AWS CLI if missing
            if ! command -v aws &> /dev/null; then
              echo "‚û°Ô∏è Installing AWS CLI..."
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              sudo apt-get install -y unzip
              unzip -q awscliv2.zip
              sudo ./aws/install
              rm -rf aws awscliv2.zip
            else
              echo "‚úÖ AWS CLI is already installed"
            fi

            # ECR login
            echo "üîπ Logging into Amazon ECR..."
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | sudo docker login --username AWS --password-stdin ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

            # Pull Docker image
            echo "üîπ Pulling latest image..."
            sudo docker pull ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

            # Stop and remove old container
            echo "üîπ Stopping old container (if running)..."
            sudo docker stop ${{ env.CONTAINER_NAME }} || true
            sudo docker rm ${{ env.CONTAINER_NAME }} || true

            # Run new container
            echo "üîπ Running new container..."
            sudo docker run -d \
              -p ${{ env.PORT }}:${{ env.PORT }} \
              -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
              -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
              -e AWS_REGION=${{ secrets.AWS_REGION }} \
              --name ${{ env.CONTAINER_NAME }} \
              ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

            echo "‚úÖ Deployment complete."
